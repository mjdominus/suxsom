#!/usr/bin/env python3

import argparse
import sqlite3
import sys
from pathlib import Path

def create_database(db_path, schema_dir):
    schema_path = Path(schema_dir)
    
    if not schema_path.exists():
        print(f"Error: Schema directory '{schema_dir}' does not exist", file=sys.stderr)
        return 1
    
    if not schema_path.is_dir():
        print(f"Error: '{schema_dir}' is not a directory", file=sys.stderr)
        return 1
    
    conn = sqlite3.connect(str(db_path))
    
    sql_files = sorted(schema_path.glob("*.sql"))
    
    if not sql_files:
        print(f"Warning: No .sql files found in '{schema_dir}'", file=sys.stderr)
        return 0
    
    for sql_file in sql_files:
        table = sql_file.stem
        print(f"Creating table {table}...", file=sys.stderr)
        
        try:
            sql = sql_file.read_text()
            conn.execute(sql)
            conn.commit()
        except sqlite3.Error as e:
            print(f"Error creating table {table}: {e}", file=sys.stderr)
            conn.rollback()
            return 1
    
    conn.close()
    print(f"Database created successfully at {db_path}", file=sys.stderr)
    return 0

def main():
    parser = argparse.ArgumentParser(description="Create SQLite database from DDL files")
    parser.add_argument("database", help="Path to the SQLite database file to create")
    parser.add_argument("schema_dir", help="Directory containing .sql DDL files")
    
    args = parser.parse_args()
    
    return create_database(args.database, args.schema_dir)

if __name__ == "__main__":
    sys.exit(main())
