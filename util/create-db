#!/usr/bin/env python3

import argparse
import sqlite3
import sys
from pathlib import Path

def create_database(db_file, schema_dir, force=False):

    db_path = Path(db_file)
    if db_path.exists():
        if force:
            db_path.unlink()
        else:
            raise Exception(f"DB file {db_file} exists; use --force")

    schema_path = Path(schema_dir)

    if not schema_path.exists():
        raise Exception(f"Schema directory '{schema_dir}' does not exist")

    if not schema_path.is_dir():
        raise Exception(f"'{schema_dir}' is not a directory")

    conn = sqlite3.connect(str(db_path))

    sql_files = sorted(schema_path.glob("*.sql"))

    if not sql_files:
        print(f"Warning: No .sql files found in '{schema_dir}'", file=sys.stderr)
        return True

    for sql_file in sql_files:
        table = sql_file.stem
        print(f"Creating table {table}...", file=sys.stderr)

        try:
            sql = sql_file.read_text()
            conn.execute(sql)
            conn.commit()
        except sqlite3.Error as e:
            print(f"Error creating table {table}: {e}", file=sys.stderr)
            conn.rollback()
            return False

    conn.close()
    print(f"Database created successfully at {db_path}", file=sys.stderr)
    return True

def main():
    parser = argparse.ArgumentParser(description="Create SQLite database from DDL files")
    parser.add_argument("schema_dir", help="Directory containing .sql DDL files")
    parser.add_argument("database", help="Path to the SQLite database file to create",
                        nargs='?', default="sqlite.db")
    parser.add_argument("--force", "-f", help="destroy and recreate existing database", action="store_true")

    args = parser.parse_args()

    return create_database(args.database, args.schema_dir, force=args.force)

if __name__ == "__main__":
    sys.exit(0 if main() else 1)
